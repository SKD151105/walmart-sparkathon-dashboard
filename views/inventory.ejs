<%- include('partials/dashHeader.ejs'); -%>
<%- include('partials/dashSidebar.ejs'); -%>

<section id="content">
  <%- include('partials/dashNav.ejs'); -%>

  <main class="inventory-main">
    <h1 class="title">Inventory Overview</h1>

    <div class="inventory-wrapper">
      <div id="inventory-section" class="inventory-grid">
        <% for (let i = 0; i < 6; i++) { %>
          <div class="inventory-card skeleton-card">
            <div class="skeleton-title shimmer"></div>
            <div class="skeleton-line shimmer"></div>
            <div class="skeleton-line shimmer"></div>
            <div class="skeleton-line shimmer"></div>
            <div class="skeleton-bar shimmer"></div>
            <div class="skeleton-text shimmer"></div>
          </div>
        <% } %>
      </div>
    </div>
  </main>
</section>

<%- include('partials/dashFooter.ejs'); -%>

<!-- ==== Styles ==== -->
<style>
  .inventory-main {
    padding: 3rem 2rem;
    max-width: 1200px;
    margin: 0 auto;
    box-sizing: border-box;
    min-height: calc(100vh - 130px);
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .inventory-wrapper {
    flex-grow: 1;
    display: flex;
    align-items: center;
  }

  .inventory-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    width: 100%;
  }

  .inventory-card {
    background-color: var(--card-bg, #fff);
    border-radius: 12px;
    padding: 1.2rem;
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    transition: background-color 0.3s ease;
  }

  .inventory-card h2 {
    font-size: 1.3rem;
    margin-bottom: 1rem;
    color: var(--text-color, #111);
  }

  .inventory-card p {
    font-size: 0.95rem;
    color: var(--text-color, #333);
    margin-bottom: 0.3rem;
    margin-top: 0.2rem;
  }

  .progress-bar-container {
    background-color: #ddd;
    height: 10px;
    border-radius: 5px;
    margin-top: 30px;
  }

  .progress-bar-fill {
  height: 100%;
  overflow: hidden;
  border-radius: 5px;
  transition: width 0.8s ease;
  }

  /* === Skeleton Loader === */
  .skeleton-card {
    position: relative;
    overflow: hidden;
  }

  .shimmer {
    animation: shimmer 1.6s infinite linear;
    background: linear-gradient(to right, #f0f0f0 8%, #e0e0e0 18%, #f0f0f0 33%);
    background-size: 1000px 100%;
  }

  .skeleton-title {
    width: 60%;
    height: 20px;
    border-radius: 4px;
    margin-bottom: 1rem;
  }

  .skeleton-line {
    width: 100%;
    height: 14px;
    border-radius: 4px;
    margin-bottom: 0.6rem;
  }

  .skeleton-bar {
    height: 10px;
    width: 100%;
    border-radius: 5px;
    margin-top: 10px;
    margin-bottom: 6px;
  }

  .skeleton-text {
    width: 40%;
    height: 12px;
    border-radius: 3px;
  }

  .title {
    padding-bottom: 2.5rem;
  }

  @keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
  }

  /* === Dark Mode Support === */
  [data-theme="dark"] .inventory-card {
  --card-bg: #1e1e2f;
  --text-color: #f1f1f1;
  background-color: var(--card-bg);
  color: var(--text-color);
}

[data-theme="dark"] .progress-bar-container {
  background-color: #444;
}

[data-theme="dark"] .shimmer {
  background: linear-gradient(to right, #2a2a2a 8%, #3c3c3c 18%, #2a2a2a 33%);
  background-size: 200% 100%;
  animation: shimmer-slow 2.5s linear infinite;
}

/* Slower shimmer animation */
@keyframes shimmer-slow {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

.gradient-fill {
  height: 100%;
  background: linear-gradient(to right, red, yellow, green);
  border-radius: 5px;
}

</style>

<!-- ==== Script ==== -->
<script>
  function getBarColor(percent) {
    if (percent < 40) return "#dc3545"; // red
    if (percent < 70) return "#ffc107"; // yellow
    return "#28a745"; // green
  }
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      const res = await fetch("/inventory/data", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
      });
      const data = await res.json();
      const section = document.getElementById("inventory-section");
      section.innerHTML = "";

      if (data.error) {
        section.innerHTML = `<p style="color: red;">Error: ${data.error}</p>`;
        return;
      }

      const entries = Object.entries(data);
      if (entries.length % 3 === 2) {
        entries.push(["Total Summary", {
          inventory: entries.reduce((a, [_, v]) => a + v.inventory, 0),
          forecast: entries.reduce((a, [_, v]) => a + v.forecast, 0),
          restock_needed: entries.reduce((a, [_, v]) => a + v.restock_needed, 0),
          percent_remaining: Math.round(
            entries.reduce((a, [_, v]) => a + v.inventory, 0) /
            entries.reduce((a, [_, v]) => a + v.forecast, 0) * 100
          )
        }]);
      }

      for (const [category, info] of entries) {
  let color;
  if (category === "Total Summary") {
    color = "#007bff"; // Blue for total summary
  } else if (info.percent_remaining < 40) {
    color = "#dc3545"; // Red if low
  } else {
    color = "#28a745"; // Green otherwise
  }

  section.innerHTML += `
    <div class="inventory-card">
      <h2>${category}</h2>
      <p><strong>Current Inventory:</strong> ${info.inventory}</p>
      <p><strong>Forecasted Demand (7 days):</strong> ${info.forecast}</p>
      <p><strong>Restock Needed:</strong> ${info.restock_needed}</p>
      <div class="progress-bar-container">
      <div class="progress-bar-fill" style="width: ${info.percent_remaining}%; background-color: ${getBarColor(info.percent_remaining)};"></div>
      </div>
      <p style="font-size: 0.85rem; margin-top: 5px;">${info.percent_remaining}% inventory coverage</p>
    </div>
  `;
}

    } catch (err) {
      document.getElementById("inventory-section").innerHTML =
        `<p style="color: red;">Error loading inventory data: ${err.message}</p>`;
    }
  });
</script>
